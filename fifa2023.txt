
--teams tabel
create table teams
(
    id int primary key,
    team_name varchar(50),
    abbreviation varchar(3),
    wins_total int,
    losses_total int,
    ties_total int,
    goals_total int,
    conceded_goals_total int,
    flag varchar(50)
);

--players tabel
create table players
( 
    id int,
    player_first_name varchar(50),
    player_last_name varchar(50),
    player_position varchar(50),
    player_number int,
    player_goals int,
    player_assists int,
    minutes_played int,
    matches_played int,
    matches_started int,
    team_id int,
    --foreign key (team_id) references teams(id)
);

--matches tabel
create table matches
(
    id int,
    match_date date,
    match_time time,
    match_leanght int,
    group_name varchar(50),
    match_type varchar(50),
    match_concluded_by varchar(50),
    match_penalty bit,
    match_location varchar(50),
    match_head_referee varchar(50),
    match_attendance int,
    match_home_team_shot int,
    match_away_team_shot int,
    match_home_team_goals int,
    match_away_team_goals int,
    match_home_team_id int,
    match_away_team_id int,
    foreign key (match_home_team_id) references teams(id),
    foreign key (match_away_team_id) references teams(id)
);

--goals tabel
create table goals
(
    id int,
    goal_minute int,
    goal_scorer_id int,
    goal_assist_id int,
    goal_match_id int,
    foreign key (goal_scorer_id) references players(id),
    foreign key (goal_assist_id) references players(id),
    foreign key (goal_match_id) references matches(id)
);

--cards tabel
create table cards
(
    id int,
    card_minute int,
    card_player_id int,
    card_match_id int,
    card_type varchar(50),
    --foreign key (card_player_id) references players(id),
    --foreign key (card_match_id) references matches(id)
);

--venues tabel
create table venues
(
    id int,
    venue_name varchar(50),
    venue_city varchar(50),
    venue_capacity int,
    venue_team_id int,
    foreign key (venue_team_id) references teams(id)
);

--coaches tabel
create table coaches
(
    id int,
    coach_first_name varchar(50),
    coach_last_name varchar(50),
    coach_team_id int,
    foreign key (coach_team_id) references teams(id)
);

--referees tabel
create table referees
(
    id int,
    referee_first_name varchar(50),
    referee_last_name varchar(50),
    referee_age int,
    referee_country varchar(50)
);


--Code Awnsers
List all games today = 
select * from matches where match_date = '2023-08-05'

List a teamâ€™s matches and results. =  
select * from matches where match_home_team_id = 4 or match_away_team_id = 4

List a group table with teams, wins, draws, losses, goal difference and points. = 
select group_name, team_name, count(matches.match_away_team_goals) as wins, losses_total, ties_total, goals_total, conceded_goals_total, (goals_total - conceded_goals_total) as goal_difference, (wins_total * 3 + ties_total) as points
from teams
inner join matches on teams.id = matches.match_home_team_id or teams.id = matches.match_away_team_id
where group_name = 'A' and match_type = 'Group stage'
group by team_name
order by points desc, goal_difference desc;

List the top-10 players sorted first by goals, then by assists = (OBS: I'm not sure if I understood the question correctly)
select player_first_name, player_last_name, player_goals, player_assists 
from players
order by player_goals desc, player_assists desc
limit 10;

List all players that are unavailable due to disciplinary reasons (i.e 2 yellow cards or 1 red card) = (OBS: no person has more than 1 yellow card, maybe!?)
select player_first_name, player_last_name, player_position, player_number, card_type
from players
inner join cards on players.id = cards.card_player_id
where card_type = 'red' or card_type = 'yellow'
group by player_first_name, player_last_name, player_position, player_number, card_type
having card_type = 'yellow' and count(card_type) >= 2 or card_type = 'red' and count(card_type) >= 1
order by player_first_name, player_last_name;

List a teams roster with players and coach, goals, assists, shots and disciplinary, matches played, matches started, minutes played. Number of clean sheets and save percentage for the goalkeepers.
select distinct player_first_name, player_last_name, coach_first_name, coach_last_name, goals_total, player_assists
, card_type, matches_played, matches_started, minutes_played, goals_total as clean_sheets
, ((sum(match_away_team_shot) - conceded_goals_total) * 100)/(sum(match_away_team_shot)) as save_percentage_rounded
, sum(match_home_team_shot) as shots_on_goal
from players
inner join coaches on coaches.coach_team_id = players.team_id
inner join teams t on coaches.coach_team_id = t.id
left join cards on cards.card_player_id = players.id
inner join matches m on t.id = m.match_home_team_id
where coaches.coach_team_id = 1
group by player_first_name;

Detailed info for a finished game including teams, players, goals, disciplinary, substitutions, referee, venue, date. Every situation often includes one or more players, a time and sometimes additional info =
select match_date, match_time, match_home_team_id, match_away_team_id, match_home_team_goals, match_away_team_goals, match_head_referee, match_location, player_first_name, player_last_name, player_position, player_number, card_type, goal_minute, goal_scorer_id, goal_assist_id, goal_match_id
from matches
inner join players on matches.match_home_team_id = players.team_id or matches.match_away_team_id = players.team_id
inner join cards on players.id = cards.card_player_id
inner join goals on players.id = goals.goal_scorer_id
where match_date = '2023-08-05'


select *
from matches
    inner join teams as home on home.id = matches.match_home_team_id
    inner join teams as away on away.id = matches.match_away_team_id
inner join players on matches.match_home_team_id = players.team_id or matches.match_away_team_id = players.team_id
left join cards on players.id = cards.card_player_id
left join goals on players.id = goals.goal_scorer_id
where matches.id = 1


Short info (teams, flags, abbreviations, score) for the same game as above. =



List the playoff tree with team abbreviations and -flags, score (if any)/date and time if no result. = 
select team_name, wins_total
from teams
order by wins_total desc
limit 3;


-- python code 

# update tables with red and yellow cards
import pandas as pd

df = pd.read_csv("../csv/cards.csv")

# update card_type column with yellow randomly to 15% of the rows
df.loc[df.sample(frac=0.15).index, "card_type"] = "yellow"
# update card_type column with red randomly to 7% of the rows
df.loc[df.sample(frac=0.07).index, "card_type"] = "red"

df.to_csv("../csv/cards.csv", index=False)


List a group table with teams, wins, draws, losses, goal difference and points. = 
select group_name, team_name, count(matches.match_away_team_goals) as wins, losses_total, ties_total, goals_total, conceded_goals_total, (goals_total - conceded_goals_total) as goal_difference, (wins_total * 3 + ties_total) as points
from teams
inner join matches on teams.id = matches.match_home_team_id or teams.id = matches.match_away_team_id
where group_name = 'A' and match_type = 'Group stage'
group by team_name
order by points desc, goal_difference desc;

